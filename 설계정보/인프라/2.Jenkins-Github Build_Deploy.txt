1. 서버에 Jenkins 설치
    - 설치시 jdk 버전을 프로젝트의 jdk 버전과 일치시켜주면 나중에 편하다.
    - 나는 프로젝트 = 21, 젠킨스 = 17로 설치해서 나중에 jdk-21 추가 설치하고 JAVA_HOME 따로 잡아줘야 했음.

2. Jenkins 기본포트 8080으로 AWS 콘솔에서 인바운드 규칙 8080 외부접근 허용
3. 공인IP:8080 접근 -> Jenkins 메인화면 뜨는데 성공

4. 기본으로 사용할 Plugin 설치
5. New Job 생성
6. Job 구성
    ㄱ. General - Github Repo 연결
    ㄴ. 소스코드관리 - Git
        - Repository URL : ㄱ에서 입력한 것과 동일한 Github Repo 주소 붙여넣기
        - Credentials : none (이후 private 프로젝트로 연결할 때에는 필요함)
        - Branches to build : master

    ㄷ. Triggers - GitHub hook trigger for GITScm polling 체크 (push 하면 자동 빌드)

    ㄹ. Environment (※ 여기부터 복잡했음...!!!)
        - Use secret text(s) or file(s) 체크
            - Variable: JASYPT_ENCRYPTOR_PASSWORD (젠킨스관리 > System > Global properties > Environment variables 에 추가한 값)
            - Credentials: Specific credentials 체크 + (젠킨스관리 > Credentials > Global 로 등록한 jasypt-password) 선택
            - 설명: DB 연결시 사용할 username 과 password 를 jasypt 로 암호화 하여 Github 에 커밋함
                    하지만 암호화 키를 다시 yml 등의 파일에 노출하는 것은 바보같은 일이기 때문에 로컬 인텔리제이에서는 VM 변수로 추가함
                    이와 같은 설정을 서버에 하기 위해 젠킨스 환경변수 사용함
                    물론 서버 자체 환경변수로 추가하는 방법도 있겠으나 여기에서는 젠킨스 환경변수 사용해보고 싶어서 이렇게 함.

    ㅁ. Build Steps - Springboot + Vue 빌드와 배포를 한번에!

        - Execute shell 체크
        - 별별 수를 다 써도 Test 클래스 빌드 하면서 DB 연결정보 복호화가 안됐다.
            인텔리제이에서는 Test Run 설정에서 따로 VM 옵션을 주고 해결할 수 있었지만, 젠킨스 빌드 스크립트에서 처리할 수 있는 방법을 찾지 못해
            build.gradle 에서 빌드할 때 Test 연결 하지 않도록 설정 변경함. ㅠㅠ
        ------------script 내용-------------------------------------------------
        set -e

        cd $WORKSPACE/my-library-backend
        export JAVA_HOME=/usr/lib/jvm/java-21-openjdk-amd64
        export PATH=$JAVA_HOME/bin:$PATH
        chmod +x gradlew

        echo "JASYPT_ENCRYPTOR_PASSWORD = $JASYPT_ENCRYPTOR_PASSWORD"

        # JVM 옵션을 테스트 태스크에 전달하기 위해 gradle.properties에 org.gradle.jvmargs 설정을 하거나,
        # gradlew 명령어에 --tests JVM args를 직접 지정할 수도 있지만,
        # 여기서는 gradlew 실행 시 전체 JVM args에 환경변수를 넣는 방법을 씁니다.

        ./gradlew clean build --refresh-dependencies \
          -Dspring.profiles.active=prod \
          -Djasypt.encryptor.password="$JASYPT_ENCRYPTOR_PASSWORD" \
          -Dorg.gradle.jvmargs="-Djasypt.encryptor.password=$JASYPT_ENCRYPTOR_PASSWORD"

        # 배포 경로 없으면 생성
        mkdir -p /var/lib/jenkins/deploy/my-library

        # 빌드된 JAR 파일 복사 (이름 고정)
        cp build/libs/my-library-backend-0.0.1-SNAPSHOT.jar /var/lib/jenkins/deploy/my-library/app.jar

        # 서비스 재시작
        sudo systemctl daemon-reload
        sudo systemctl restart my-library

        # --- 여기서부터 Vue 프론트엔드 빌드 및 복사 시작 ---
        cd $WORKSPACE/my-library-front

        # 추후 캐시사용 방식으로 변경시 빌드 시간 단축 가능
        npm install
        NODE_ENV=production npm run build

        # 빌드 결과물을 Nginx 루트로 복사 (기본 경로 예시)
        /usr/bin/sudo cp -r dist/* /var/www/html/


